-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_permissions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  permission text NOT NULL,
  resource text,
  granted_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT admin_permissions_pkey PRIMARY KEY (id),
  CONSTRAINT admin_permissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT admin_permissions_granted_by_fkey FOREIGN KEY (granted_by) REFERENCES public.users(id)
);
CREATE TABLE public.ai_conversation_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  relationship_id uuid,
  relationship_type text NOT NULL CHECK (relationship_type = ANY (ARRAY['romantic'::text, 'work'::text, 'family'::text, 'friend'::text, 'other'::text])),
  conversation_type text NOT NULL CHECK (conversation_type = ANY (ARRAY['insight_generation'::text, 'journal_analysis'::text, 'suggestion_creation'::text, 'general_conversation'::text])),
  user_input text,
  ai_response text,
  response_type text NOT NULL CHECK (response_type = ANY (ARRAY['insight'::text, 'suggestion'::text, 'analysis'::text, 'conversation'::text])),
  ai_personality_used text NOT NULL,
  memory_entries_referenced integer DEFAULT 0,
  context_used jsonb DEFAULT '{}'::jsonb,
  confidence numeric DEFAULT 0.80,
  user_feedback integer,
  was_helpful boolean,
  created_at timestamp with time zone DEFAULT now(),
  response_time_ms integer,
  session_id uuid,
  sequence_number integer DEFAULT 1,
  CONSTRAINT ai_conversation_history_pkey PRIMARY KEY (id),
  CONSTRAINT ai_conversation_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT ai_conversation_history_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.ai_memory_entries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  relationship_id uuid,
  relationship_type text NOT NULL CHECK (relationship_type = ANY (ARRAY['romantic'::text, 'work'::text, 'family'::text, 'friend'::text, 'other'::text])),
  entry_type text NOT NULL CHECK (entry_type = ANY (ARRAY['interaction'::text, 'insight'::text, 'pattern'::text, 'milestone'::text, 'preference'::text, 'boundary'::text])),
  content text NOT NULL,
  context jsonb DEFAULT '{}'::jsonb,
  importance text NOT NULL CHECK (importance = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  emotional_tone text NOT NULL CHECK (emotional_tone = ANY (ARRAY['positive'::text, 'neutral'::text, 'negative'::text, 'mixed'::text])),
  tags ARRAY DEFAULT '{}'::text[],
  created_at timestamp with time zone DEFAULT now(),
  last_referenced_at timestamp with time zone,
  reference_count integer DEFAULT 0,
  expires_at timestamp with time zone,
  is_active boolean DEFAULT true,
  confidence_score numeric DEFAULT 0.80,
  created_at_index timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_memory_entries_pkey PRIMARY KEY (id),
  CONSTRAINT ai_memory_entries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT ai_memory_entries_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.batch_processing_log (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  batch_date date NOT NULL,
  relationship_id uuid,
  entries_processed integer DEFAULT 0,
  suggestions_generated integer DEFAULT 0,
  processing_status text DEFAULT 'completed'::text CHECK (processing_status = ANY (ARRAY['running'::text, 'completed'::text, 'failed'::text])),
  error_message text,
  processing_started_at timestamp without time zone DEFAULT now(),
  processing_completed_at timestamp without time zone,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT batch_processing_log_pkey PRIMARY KEY (id),
  CONSTRAINT batch_processing_log_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.beta_signups (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL UNIQUE,
  partner_email text,
  connection_gap text,
  source text DEFAULT 'landing'::text,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  email_sent boolean DEFAULT false,
  converted_to_user boolean DEFAULT false,
  user_id uuid,
  notes text,
  CONSTRAINT beta_signups_pkey PRIMARY KEY (id),
  CONSTRAINT beta_signups_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.communication_analysis_results (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  relationship_id uuid,
  directness_score integer NOT NULL CHECK (directness_score >= 0 AND directness_score <= 100),
  assertiveness_score integer NOT NULL CHECK (assertiveness_score >= 0 AND assertiveness_score <= 100),
  emotional_expression_score integer NOT NULL CHECK (emotional_expression_score >= 0 AND emotional_expression_score <= 100),
  conflict_style text NOT NULL CHECK (conflict_style = ANY (ARRAY['competing'::text, 'accommodating'::text, 'avoiding'::text, 'compromising'::text, 'collaborating'::text])),
  journal_entries_analyzed integer NOT NULL CHECK (journal_entries_analyzed >= 10),
  confidence_level double precision NOT NULL CHECK (confidence_level >= 0::double precision AND confidence_level <= 100::double precision),
  communication_patterns jsonb,
  generated_at timestamp without time zone DEFAULT now(),
  expires_at timestamp without time zone DEFAULT (now() + '60 days'::interval),
  CONSTRAINT communication_analysis_results_pkey PRIMARY KEY (id),
  CONSTRAINT communication_analysis_results_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT communication_analysis_results_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.connection_scores (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  relationship_id uuid,
  score integer CHECK (score >= 0 AND score <= 100),
  factors jsonb,
  calculated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT connection_scores_pkey PRIMARY KEY (id),
  CONSTRAINT connection_scores_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.cycle_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  cycle_id uuid,
  phase text NOT NULL CHECK (phase = ANY (ARRAY['menstrual'::text, 'follicular'::text, 'ovulation'::text, 'luteal'::text])),
  predicted_mood jsonb,
  partner_suggestions jsonb,
  generated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT cycle_insights_pkey PRIMARY KEY (id),
  CONSTRAINT cycle_insights_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT cycle_insights_cycle_id_fkey FOREIGN KEY (cycle_id) REFERENCES public.menstrual_cycles(id)
);
CREATE TABLE public.daily_checkins (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  relationship_id uuid,
  connection_score integer CHECK (connection_score >= 1 AND connection_score <= 10),
  mood_score integer CHECK (mood_score >= 1 AND mood_score <= 10),
  gratitude_note text,
  challenge_note text,
  created_at timestamp with time zone DEFAULT now(),
  improvement_note text,
  CONSTRAINT daily_checkins_pkey PRIMARY KEY (id),
  CONSTRAINT daily_checkins_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id),
  CONSTRAINT daily_checkins_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.dashboard_cache (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  dashboard_data jsonb NOT NULL,
  overall_health_score numeric,
  health_trend text CHECK (health_trend = ANY (ARRAY['improving'::text, 'stable'::text, 'declining'::text])),
  timeframe_days integer DEFAULT 30,
  data_points_analyzed integer DEFAULT 0,
  ai_version character varying DEFAULT '2.0-enhanced'::character varying,
  includes_partner_data boolean DEFAULT false,
  cached_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone DEFAULT (now() + '06:00:00'::interval),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT dashboard_cache_pkey PRIMARY KEY (id),
  CONSTRAINT dashboard_cache_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.enhanced_journal_analysis (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  journal_content_hash character varying NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  sentiment_analysis jsonb DEFAULT '{}'::jsonb,
  overall_sentiment character varying DEFAULT 'neutral'::character varying,
  confidence_score numeric DEFAULT 0.5 CHECK (confidence_score >= 0::numeric AND confidence_score <= 1::numeric),
  relationship_needs jsonb DEFAULT '[]'::jsonb,
  relationship_health_score integer DEFAULT 5 CHECK (relationship_health_score >= 1 AND relationship_health_score <= 10),
  fulfillment_tracking jsonb DEFAULT '{}'::jsonb,
  immediate_actions ARRAY DEFAULT ARRAY[]::text[],
  pattern_insights jsonb DEFAULT '[]'::jsonb,
  analysis_version character varying DEFAULT '2.0-enhanced'::character varying,
  CONSTRAINT enhanced_journal_analysis_pkey PRIMARY KEY (id),
  CONSTRAINT fk_enhanced_journal_analysis_user FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.enhanced_onboarding_responses (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  session_id uuid DEFAULT gen_random_uuid(),
  love_language_ranking ARRAY NOT NULL DEFAULT '{}'::text[],
  love_language_scores jsonb NOT NULL DEFAULT '{}'::jsonb,
  love_language_examples jsonb NOT NULL DEFAULT '{}'::jsonb,
  communication_style text NOT NULL DEFAULT ''::text,
  conflict_approach text NOT NULL DEFAULT ''::text,
  stress_response text NOT NULL DEFAULT ''::text,
  expression_preferences jsonb NOT NULL DEFAULT '{}'::jsonb,
  communication_timing ARRAY NOT NULL DEFAULT '{}'::text[],
  intimacy_priorities jsonb NOT NULL DEFAULT '{}'::jsonb,
  intimacy_enhancers ARRAY NOT NULL DEFAULT '{}'::text[],
  intimacy_barriers ARRAY NOT NULL DEFAULT '{}'::text[],
  connection_frequency jsonb NOT NULL DEFAULT '{}'::jsonb,
  primary_goals ARRAY NOT NULL DEFAULT '{}'::text[],
  goal_timeline text NOT NULL DEFAULT ''::text,
  specific_challenges text NOT NULL DEFAULT ''::text,
  relationship_values ARRAY NOT NULL DEFAULT '{}'::text[],
  success_metrics text NOT NULL DEFAULT ''::text,
  expression_directness text NOT NULL DEFAULT ''::text,
  expression_frequency text NOT NULL DEFAULT ''::text,
  preferred_methods ARRAY NOT NULL DEFAULT '{}'::text[],
  need_categories_difficulty jsonb NOT NULL DEFAULT '{}'::jsonb,
  partner_reading_ability integer CHECK (partner_reading_ability >= 1 AND partner_reading_ability <= 10),
  successful_communication_example text NOT NULL DEFAULT ''::text,
  communication_barriers ARRAY NOT NULL DEFAULT '{}'::text[],
  completed_at timestamp with time zone,
  version integer DEFAULT 2,
  ai_processing_status text DEFAULT 'pending'::text CHECK (ai_processing_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  ai_profile_data jsonb,
  relationship_start_date date,
  anniversary_date date,
  relationship_duration_years integer DEFAULT 0 CHECK (relationship_duration_years >= 0 AND relationship_duration_years <= 100),
  relationship_duration_months integer DEFAULT 0 CHECK (relationship_duration_months >= 0 AND relationship_duration_months <= 11),
  love_language_weights jsonb,
  love_language_effective_scores jsonb,
  love_language_giving_profile jsonb,
  love_language_receiving_profile jsonb,
  CONSTRAINT enhanced_onboarding_responses_pkey PRIMARY KEY (id),
  CONSTRAINT enhanced_onboarding_responses_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.firo_compatibility_results (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  relationship_id uuid UNIQUE,
  user1_id uuid,
  user2_id uuid,
  user1_inclusion integer NOT NULL CHECK (user1_inclusion >= 1 AND user1_inclusion <= 9),
  user1_control integer NOT NULL CHECK (user1_control >= 1 AND user1_control <= 9),
  user1_affection integer NOT NULL CHECK (user1_affection >= 1 AND user1_affection <= 9),
  user2_inclusion integer NOT NULL CHECK (user2_inclusion >= 1 AND user2_inclusion <= 9),
  user2_control integer NOT NULL CHECK (user2_control >= 1 AND user2_control <= 9),
  user2_affection integer NOT NULL CHECK (user2_affection >= 1 AND user2_affection <= 9),
  inclusion_compatibility_score integer NOT NULL CHECK (inclusion_compatibility_score >= 0 AND inclusion_compatibility_score <= 100),
  control_compatibility_score integer NOT NULL CHECK (control_compatibility_score >= 0 AND control_compatibility_score <= 100),
  affection_compatibility_score integer NOT NULL CHECK (affection_compatibility_score >= 0 AND affection_compatibility_score <= 100),
  overall_compatibility_score integer NOT NULL CHECK (overall_compatibility_score >= 0 AND overall_compatibility_score <= 100),
  confidence_level double precision NOT NULL CHECK (confidence_level >= 0::double precision AND confidence_level <= 100::double precision),
  generated_at timestamp without time zone DEFAULT now(),
  expires_at timestamp without time zone DEFAULT (now() + '30 days'::interval),
  CONSTRAINT firo_compatibility_results_pkey PRIMARY KEY (id),
  CONSTRAINT firo_compatibility_results_user1_id_fkey FOREIGN KEY (user1_id) REFERENCES auth.users(id),
  CONSTRAINT firo_compatibility_results_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id),
  CONSTRAINT firo_compatibility_results_user2_id_fkey FOREIGN KEY (user2_id) REFERENCES auth.users(id)
);
CREATE TABLE public.insight_feedback (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  insight_id uuid,
  rating text CHECK (rating = ANY (ARRAY['up'::text, 'down'::text])),
  comment text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT insight_feedback_pkey PRIMARY KEY (id),
  CONSTRAINT insight_feedback_insight_id_fkey FOREIGN KEY (insight_id) REFERENCES public.relationship_insights(id)
);
CREATE TABLE public.journal_entries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  content text NOT NULL,
  mood_score integer CHECK (mood_score >= 1 AND mood_score <= 10),
  ai_analysis jsonb,
  created_at timestamp with time zone DEFAULT now(),
  is_private boolean DEFAULT false,
  tags ARRAY,
  title text,
  ai_processing_status text DEFAULT 'pending'::text,
  ai_processed_at timestamp without time zone,
  relationship_id uuid,
  relationship_context text,
  personal_insights_generated boolean DEFAULT false,
  ready_for_batch_processing boolean DEFAULT true,
  batch_processed_at timestamp without time zone,
  CONSTRAINT journal_entries_pkey PRIMARY KEY (id),
  CONSTRAINT journal_entries_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT journal_entries_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.memory_system_analytics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  relationship_id uuid,
  relationship_type text CHECK (relationship_type = ANY (ARRAY['romantic'::text, 'work'::text, 'family'::text, 'friend'::text, 'other'::text])),
  memory_operation text NOT NULL CHECK (memory_operation = ANY (ARRAY['store'::text, 'retrieve'::text, 'update'::text, 'delete'::text, 'cleanup'::text])),
  operation_success boolean NOT NULL,
  memory_count integer DEFAULT 0,
  operation_time_ms integer DEFAULT 0,
  triggered_by text,
  operation_metadata jsonb DEFAULT '{}'::jsonb,
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT memory_system_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT memory_system_analytics_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT memory_system_analytics_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.menstrual_cycles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  cycle_start_date date NOT NULL,
  cycle_length integer DEFAULT 28 CHECK (cycle_length >= 21 AND cycle_length <= 45),
  period_length integer DEFAULT 5 CHECK (period_length >= 1 AND period_length <= 10),
  symptoms jsonb,
  notes text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT menstrual_cycles_pkey PRIMARY KEY (id),
  CONSTRAINT menstrual_cycles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.partner_attunement_scores (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  partner_user_id uuid NOT NULL,
  relationship_id character varying,
  overall_attunement numeric CHECK (overall_attunement >= 1::numeric AND overall_attunement <= 10::numeric),
  responsiveness_score numeric CHECK (responsiveness_score >= 1::numeric AND responsiveness_score <= 10::numeric),
  understanding_score numeric CHECK (understanding_score >= 1::numeric AND understanding_score <= 10::numeric),
  proactive_care_score numeric CHECK (proactive_care_score >= 1::numeric AND proactive_care_score <= 10::numeric),
  love_language_alignment numeric CHECK (love_language_alignment >= 1::numeric AND love_language_alignment <= 10::numeric),
  timing_effectiveness numeric CHECK (timing_effectiveness >= 1::numeric AND timing_effectiveness <= 10::numeric),
  trend_analysis jsonb DEFAULT '{}'::jsonb,
  improvement_recommendations jsonb DEFAULT '[]'::jsonb,
  celebration_points jsonb DEFAULT '[]'::jsonb,
  analysis_timeframe_months integer DEFAULT 3,
  data_points_analyzed integer DEFAULT 0,
  confidence_level numeric DEFAULT 0.5,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT partner_attunement_scores_pkey PRIMARY KEY (id),
  CONSTRAINT partner_attunement_scores_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT partner_attunement_scores_partner_user_id_fkey FOREIGN KEY (partner_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.partner_suggestions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  relationship_id uuid,
  recipient_user_id uuid,
  source_user_id uuid,
  suggestion_text text NOT NULL,
  suggestion_type text,
  delivered_at timestamp with time zone,
  viewed_at timestamp with time zone,
  response text,
  effectiveness_rating integer,
  created_at timestamp with time zone DEFAULT now(),
  quality_metrics jsonb,
  validation_passed boolean DEFAULT true,
  expires_at timestamp with time zone,
  priority_score integer DEFAULT 5,
  confidence_score integer DEFAULT 5,
  anonymized_context text,
  pillar_type text DEFAULT 'action'::text CHECK (pillar_type = ANY (ARRAY['pattern'::text, 'action'::text, 'gratitude'::text, 'milestone'::text])),
  batch_date date,
  batch_id uuid,
  read_status text DEFAULT 'unread'::text CHECK (read_status = ANY (ARRAY['unread'::text, 'read'::text, 'acknowledged'::text])),
  read_at timestamp without time zone,
  dashboard_dismissed boolean DEFAULT false,
  CONSTRAINT partner_suggestions_pkey PRIMARY KEY (id),
  CONSTRAINT partner_suggestions_source_user_id_fkey FOREIGN KEY (source_user_id) REFERENCES public.users(id),
  CONSTRAINT partner_suggestions_recipient_user_id_fkey FOREIGN KEY (recipient_user_id) REFERENCES public.users(id),
  CONSTRAINT partner_suggestions_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.premium_analyses (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  relationship_id uuid,
  analysis_type text NOT NULL CHECK (analysis_type = ANY (ARRAY['firo_compatibility'::text, 'communication_style'::text, 'relationship_trends'::text])),
  results jsonb NOT NULL,
  confidence_score double precision NOT NULL CHECK (confidence_score >= 0::double precision AND confidence_score <= 100::double precision),
  research_citations ARRAY DEFAULT '{}'::text[],
  limitations text,
  generated_at timestamp without time zone DEFAULT now(),
  expires_at timestamp without time zone DEFAULT (now() + '90 days'::interval),
  CONSTRAINT premium_analyses_pkey PRIMARY KEY (id),
  CONSTRAINT premium_analyses_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT premium_analyses_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.premium_subscriptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  subscription_status text NOT NULL CHECK (subscription_status = ANY (ARRAY['active'::text, 'cancelled'::text, 'expired'::text, 'trial'::text])),
  plan_type text NOT NULL CHECK (plan_type = ANY (ARRAY['premium_monthly'::text, 'premium_yearly'::text, 'premium_trial'::text])),
  stripe_subscription_id text UNIQUE,
  current_period_start timestamp without time zone,
  current_period_end timestamp without time zone,
  trial_ends_at timestamp without time zone,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT premium_subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT premium_subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.privacy_preserving_suggestions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  target_user_id uuid NOT NULL,
  source_content_hash character varying NOT NULL,
  relationship_id character varying,
  suggestion_type text CHECK (suggestion_type = ANY (ARRAY['emotional_support'::text, 'quality_time'::text, 'physical_affection'::text, 'acts_of_service'::text, 'words_of_affirmation'::text, 'gift_giving'::text])),
  anonymized_suggestion text NOT NULL,
  love_language_match text,
  urgency text CHECK (urgency = ANY (ARRAY['immediate'::text, 'today'::text, 'this_week'::text, 'ongoing'::text])),
  optimal_timing jsonb DEFAULT '{}'::jsonb,
  anonymization_level text DEFAULT 'high'::text,
  confidence_score numeric DEFAULT 0.5,
  created_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone DEFAULT (now() + '7 days'::interval),
  is_active boolean DEFAULT true,
  CONSTRAINT privacy_preserving_suggestions_pkey PRIMARY KEY (id),
  CONSTRAINT privacy_preserving_suggestions_target_user_id_fkey FOREIGN KEY (target_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.realtime_intelligence (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  partner_user_id uuid,
  current_needs jsonb DEFAULT '[]'::jsonb,
  proactive_suggestions jsonb DEFAULT '[]'::jsonb,
  connection_opportunities jsonb DEFAULT '[]'::jsonb,
  risk_alerts jsonb DEFAULT '[]'::jsonb,
  celebration_moments jsonb DEFAULT '[]'::jsonb,
  optimal_timing jsonb DEFAULT '[]'::jsonb,
  intelligence_confidence numeric DEFAULT 0.5,
  context_factors jsonb DEFAULT '{}'::jsonb,
  valid_from timestamp with time zone DEFAULT now(),
  valid_until timestamp with time zone DEFAULT (now() + '06:00:00'::interval),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT realtime_intelligence_pkey PRIMARY KEY (id),
  CONSTRAINT realtime_intelligence_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT realtime_intelligence_partner_user_id_fkey FOREIGN KEY (partner_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.relationship_checkins (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  relationship_id uuid NOT NULL,
  metric_values jsonb NOT NULL DEFAULT '{}'::jsonb,
  text_responses jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT relationship_checkins_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_checkins_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT relationship_checkins_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.relationship_context_cache (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  relationship_id uuid NOT NULL,
  relationship_type text NOT NULL CHECK (relationship_type = ANY (ARRAY['romantic'::text, 'work'::text, 'family'::text, 'friend'::text, 'other'::text])),
  recent_interactions jsonb DEFAULT '[]'::jsonb,
  important_patterns jsonb DEFAULT '[]'::jsonb,
  preferences jsonb DEFAULT '[]'::jsonb,
  boundaries jsonb DEFAULT '[]'::jsonb,
  milestones jsonb DEFAULT '[]'::jsonb,
  last_updated timestamp with time zone DEFAULT now(),
  cache_version text DEFAULT '1.0'::text,
  CONSTRAINT relationship_context_cache_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_context_cache_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT relationship_context_cache_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.relationship_health_scores (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  relationship_id uuid,
  user_id uuid,
  health_score integer NOT NULL CHECK (health_score >= 0 AND health_score <= 100),
  trend text CHECK (trend = ANY (ARRAY['improving'::text, 'stable'::text, 'declining'::text])),
  last_activity timestamp without time zone DEFAULT now(),
  unread_insights_count integer DEFAULT 0,
  unread_suggestions_count integer DEFAULT 0,
  calculated_at timestamp without time zone DEFAULT now(),
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT relationship_health_scores_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_health_scores_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id),
  CONSTRAINT relationship_health_scores_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.relationship_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  relationship_id uuid,
  generated_for_user uuid,
  insight_type text NOT NULL CHECK (insight_type = ANY (ARRAY['pattern'::text, 'suggestion'::text, 'appreciation'::text, 'milestone'::text, 'insight'::text, 'growth'::text, 'connection'::text, 'professional_growth'::text, 'family_harmony'::text, 'friendship_support'::text, 'personal_growth'::text, 'boundary'::text, 'communication'::text, 'emotional_growth'::text, 'relationship_milestone'::text, 'behavioral_pattern'::text, 'preference_insight'::text])),
  title text NOT NULL,
  description text NOT NULL,
  priority text DEFAULT 'medium'::text CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  is_read boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  read_status text DEFAULT 'unread'::text CHECK (read_status = ANY (ARRAY['unread'::text, 'read'::text, 'acknowledged'::text])),
  read_at timestamp without time zone,
  dashboard_dismissed boolean DEFAULT false,
  pillar_type text CHECK (pillar_type = ANY (ARRAY['pattern'::text, 'growth'::text, 'appreciation'::text, 'milestone'::text])),
  relevance_score integer DEFAULT 0 CHECK (relevance_score >= 0 AND relevance_score <= 100),
  psychological_factors jsonb,
  CONSTRAINT relationship_insights_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_insights_generated_for_user_fkey FOREIGN KEY (generated_for_user) REFERENCES public.users(id),
  CONSTRAINT relationship_insights_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.relationship_interactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  responding_user_id uuid NOT NULL,
  target_user_id uuid NOT NULL,
  relationship_id character varying,
  interaction_type text NOT NULL CHECK (interaction_type = ANY (ARRAY['suggestion_response'::text, 'proactive_action'::text, 'need_acknowledgment'::text, 'quality_time'::text, 'physical_affection'::text, 'emotional_support'::text, 'acts_of_service'::text, 'words_of_affirmation'::text, 'gift_giving'::text])),
  trigger_event_id uuid,
  response_delay_hours numeric,
  appropriateness_score numeric DEFAULT 0.5,
  love_language_match boolean DEFAULT false,
  user_satisfaction_rating numeric,
  context_description text,
  anonymized_context text,
  confidence_score numeric DEFAULT 0.5,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT relationship_interactions_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_interactions_target_user_id_fkey FOREIGN KEY (target_user_id) REFERENCES auth.users(id),
  CONSTRAINT relationship_interactions_responding_user_id_fkey FOREIGN KEY (responding_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.relationship_invitations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  from_user_id uuid,
  to_email text,
  relationship_name text NOT NULL,
  relationship_type text DEFAULT 'couple'::text CHECK (relationship_type = ANY (ARRAY['couple'::text, 'family'::text, 'friends'::text, 'work'::text, 'poly'::text, 'custom'::text])),
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'accepted'::text, 'declined'::text, 'expired'::text])),
  created_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone DEFAULT (now() + '7 days'::interval),
  accepted_at timestamp with time zone,
  invite_code text UNIQUE,
  CONSTRAINT relationship_invitations_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_invitations_from_user_id_fkey FOREIGN KEY (from_user_id) REFERENCES public.users(id)
);
CREATE TABLE public.relationship_language_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  relationship_id uuid NOT NULL,
  language_rankings ARRAY NOT NULL DEFAULT '{}'::text[],
  giving_preferences ARRAY NOT NULL DEFAULT '{}'::text[],
  receiving_preferences ARRAY NOT NULL DEFAULT '{}'::text[],
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT relationship_language_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_language_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT relationship_language_preferences_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.relationship_members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  relationship_id uuid,
  user_id uuid,
  role text DEFAULT 'member'::text CHECK (role = ANY (ARRAY['admin'::text, 'member'::text])),
  joined_at timestamp with time zone DEFAULT now(),
  CONSTRAINT relationship_members_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT relationship_members_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.relationship_profiles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  relationship_id uuid,
  perceived_closeness integer DEFAULT 5 CHECK (perceived_closeness >= 1 AND perceived_closeness <= 10),
  communication_frequency text CHECK ((communication_frequency = ANY (ARRAY['daily'::text, 'weekly'::text, 'monthly'::text, 'rarely'::text])) OR communication_frequency IS NULL),
  preferred_interaction_style text,
  relationship_expectations jsonb DEFAULT '{}'::jsonb,
  interaction_preferences jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT relationship_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT relationship_profiles_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id)
);
CREATE TABLE public.relationship_trend_analysis (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  relationship_id uuid,
  user_id uuid,
  satisfaction_trend_slope double precision NOT NULL,
  stability_score integer NOT NULL CHECK (stability_score >= 0 AND stability_score <= 100),
  trend_direction text NOT NULL CHECK (trend_direction = ANY (ARRAY['improving'::text, 'stable'::text, 'declining'::text])),
  positive_patterns ARRAY DEFAULT '{}'::text[],
  risk_factors ARRAY DEFAULT '{}'::text[],
  gottman_indicators jsonb,
  data_points_analyzed integer NOT NULL CHECK (data_points_analyzed >= 30),
  confidence_level double precision NOT NULL CHECK (confidence_level >= 0::double precision AND confidence_level <= 100::double precision),
  analysis_period_days integer NOT NULL CHECK (analysis_period_days >= 30),
  generated_at timestamp without time zone DEFAULT now(),
  expires_at timestamp without time zone DEFAULT (now() + '30 days'::interval),
  CONSTRAINT relationship_trend_analysis_pkey PRIMARY KEY (id),
  CONSTRAINT relationship_trend_analysis_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.relationships(id),
  CONSTRAINT relationship_trend_analysis_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.relationships (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  relationship_type text NOT NULL CHECK (relationship_type = ANY (ARRAY['romantic'::text, 'family'::text, 'friend'::text, 'work'::text, 'other'::text])),
  created_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT relationships_pkey PRIMARY KEY (id),
  CONSTRAINT relationships_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.score_analytics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  score_value integer NOT NULL,
  score_components jsonb NOT NULL,
  user_perception text CHECK (user_perception = ANY (ARRAY['too_high'::text, 'too_low'::text, 'just_right'::text])),
  engagement_after jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT score_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT score_analytics_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.universal_user_profiles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE,
  inclusion_need integer DEFAULT 5 CHECK (inclusion_need >= 1 AND inclusion_need <= 10),
  control_need integer DEFAULT 5 CHECK (control_need >= 1 AND control_need <= 10),
  affection_need integer DEFAULT 5 CHECK (affection_need >= 1 AND affection_need <= 10),
  attachment_style text CHECK ((attachment_style = ANY (ARRAY['secure'::text, 'anxious'::text, 'avoidant'::text, 'disorganized'::text])) OR attachment_style IS NULL),
  attachment_confidence double precision DEFAULT 0.5 CHECK (attachment_confidence >= 0::double precision AND attachment_confidence <= 1::double precision),
  communication_directness text CHECK ((communication_directness = ANY (ARRAY['direct'::text, 'indirect'::text])) OR communication_directness IS NULL),
  communication_assertiveness text CHECK ((communication_assertiveness = ANY (ARRAY['passive'::text, 'assertive'::text, 'aggressive'::text])) OR communication_assertiveness IS NULL),
  communication_context text CHECK ((communication_context = ANY (ARRAY['high-context'::text, 'low-context'::text])) OR communication_context IS NULL),
  support_preference text DEFAULT 'balanced'::text CHECK ((support_preference = ANY (ARRAY['instrumental'::text, 'emotional'::text, 'balanced'::text])) OR support_preference IS NULL),
  conflict_style text CHECK ((conflict_style = ANY (ARRAY['competing'::text, 'collaborating'::text, 'avoiding'::text, 'accommodating'::text, 'compromising'::text])) OR conflict_style IS NULL),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT universal_user_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT universal_user_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_availability (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL,
  start_hour integer CHECK (start_hour >= 0 AND start_hour <= 23),
  end_hour integer CHECK (end_hour >= 0 AND end_hour <= 23),
  availability_type text CHECK (availability_type = ANY (ARRAY['available'::text, 'busy'::text, 'do_not_disturb'::text, 'flexible'::text])),
  activity_description text,
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 10),
  openness_to_connection integer CHECK (openness_to_connection >= 1 AND openness_to_connection <= 10),
  timezone character varying DEFAULT 'UTC'::character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_availability_pkey PRIMARY KEY (id),
  CONSTRAINT user_availability_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_roles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  role text NOT NULL CHECK (role = ANY (ARRAY['admin'::text, 'moderator'::text, 'user'::text])),
  granted_by uuid,
  granted_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_roles_pkey PRIMARY KEY (id),
  CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT user_roles_granted_by_fkey FOREIGN KEY (granted_by) REFERENCES public.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL,
  email text NOT NULL UNIQUE,
  full_name text,
  avatar_url text,
  onboarding_completed boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  age_range text,
  location text,
  zip_code text,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);